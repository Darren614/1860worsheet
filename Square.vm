// Square.vm
// Computes y = xÂ² where x is stored in argument[0]
// Result remains at the bottom of the stack without modifying argument[0]

push argument 0     // Load x onto the stack
dup                 // Duplicate the top of the stack (x). Stack state: x, x
push constant 0     
lt                  // Check if x < 0
if-goto NEGATIVE    // Jump to NEGATIVE if x is negative
goto POSITIVE       // Jump to POSITIVE otherwise

label POSITIVE
pop temp 0          // Save loop counter as x (temp 0)
pop temp 1          // Save addend as x (temp 1)
goto LOOP_SETUP

label NEGATIVE
neg                 // Negate x to get |x|
pop temp 0          // Save loop counter as |x| (temp 0)
pop                 // Discard the original negative x
push temp 0         
pop temp 1          // Save addend as |x| (temp 1)

label LOOP_SETUP
push constant 0     
pop temp 2          // Initialize accumulator to 0 (temp 2)

label LOOP
push temp 2         // Load accumulator
push temp 1         // Load addend
add                 // Accumulate: temp2 = temp2 + temp1
pop temp 2          // Update accumulator value
push temp 0         // Load loop counter
push constant 1     
sub                 // Decrement loop counter by 1
pop temp 0          // Update loop counter
push temp 0         
push constant 0     
gt                  // Check if loop counter > 0
if-goto LOOP        // Continue looping until counter reaches 0

push temp 2         // Push the result to the bottom of the stack

// Infinite loop to prevent errors
(END)
@END
0;JMP