CHIP Decoder201873449{
    IN A, B, C, D;
    OUT a,b,c,d,e,f,g;

    PARTS:
    Not(in=A, out=notA);
    Not(in=B, out=notB);
    Not(in=C, out=notC);
    Not(in=D, out=notD);

    //a segment
    And(a=notB, b=notD, out=w1a);
    And(a=A, b=notC, out=AANDNOTCa);
    And(a=AANDNOTCa, b=notD, out=w2a);
    And(a=A, b=notB, out=AANDNOTBa);
    And(a=AANDNOTBa, b=notC, out=w3a);
    And(a=notA, b=B, out=NOTAANDBa);
    And(a=NOTAANDBa, b=D, out=w4a);
    And(a=A, b=B, out=AANDBa);
    And(a=AANDBa, b=C, out=w5a);
    And(a=notA, b=C, out=w6a);
    
    Or(a=w1a, b=w2a, out=W1ORW2a);
    Or(a=w3a, b=w4a, out=W3ORW4a);
    Or(a=w5a, b=w6a, out=W5ORW6a);
    Or(a=W1ORW2a, b=W3ORW4a, out=W1ORW2W3ORW4a);
    Or(a=W1ORW2W3ORW4a, b=W5ORW6a, out=a);


   
   // b segment
    And(a=A, b=notB, out=term1);

    And(a=B, b=notD, out=term2);

    And(a=notA, b=notB, out=notAnotB);
    And(a=notC, b=notD, out=notCnotD);
    And(a=notAnotB, b=notCnotD, out=term3);

    And(a=notA, b=B, out=notAB);
    And(a=notC, b=D, out=notCD);
    And(a=notAB, b=notCD, out=term4);

    And(a=A, b=B, out=AB);
    And(a=AB, b=C, out=term5);

    Or(a=term1, b=term2, out=term12);
    Or(a=term3, b=term4, out=term34);
    Or(a=term12, b=term34, out=term1234);
    Or(a=term1234, b=term5, out=b);

    //c segment

    And(a=A, b=B, out=AandB);
    And(a=A, b=C, out=AandC);
    And(a=notB, b=notD, out=notBandnotD);
    And(a=C, b=notD, out=CandnotD);

    Or(a=AandB, b=AandC, out=g1);
    Or(a=notBandnotD, b=CandnotD, out=g2);

    Or(a=g1, b=g2, out=c);


    //d segment

    And(a=notA, b=B, out=BnotA);
    And(a=BnotA, b=notC, out=f1);

    And(a=notA, b=notB, out=notAnotB);
    And(a=notAnotB, b=C, out=f2);

    And(a=A, b=B, out=AB);
    And(a=AB, b=D, out=f3);

    And(a=C, b=notD, out=f4);

    And(a=A, b=notB, out=f5);

    Or(a=f1, b=f2, out=f12);
    Or(a=f12, b=f3, out=f123);
    Or(a=f123, b=f4, out=f1234);
    Or(a=f1234, b=f5, out=d);

    //e segment

    And(a=notA, b=notC, out=notAnotC);
    And(a=notAnotC, b=notD, out=f1);

    And(a=notA, b=D, out=f2);

    And(a=notA, b=B, out=BnotA);
    And(a=BnotA, b=C, out=f3);

    And(a=B, b=notC, out=BnotC);
    And(a=BnotC, b=D, out=f4);

    And(a=A, b=notB, out=f5);
    
    Or(a=f1, b=f2, out=f12);
    Or(a=f12, b=f3, out=f123);
    Or(a=f123, b=f4, out=f1234);
    Or(a=f1234, b=f5, out=e);



    //f segment

    And(a=notA, b=notB, out=notAnotB);
    And(a=notAnotB, b=notC, out=f1);

    And(a=notA, b=C, out=CnotA);
    And(CnotA, b=notD, out=f2);

    And(a=notB, b=notC, out=notBnotC);
    And(a=notBnotC, b=notD, out=f3);

    And(a=A, b=notB, out=AnotB);
    And(a=AnotB, b=notC, out=f4);

    And(a=A, b=B, out=AB);
    And(a=AB, b=C, out=f5);

    Or(a=f1, b=f2, out=f12);
    Or(a=f12, b=f3, out=f123);
    Or(a=f123, b=f4, out=f1234);
    Or(a=f1234, b=f5, out=f);


    //g segment

    And(a=A,b=notC,out=final1);
   
    And(a=notA,b=notB,out=and1);
    And(a=and1,b=notD,out=final2);
   
    And(a=B,b=notC,out=and2);
    And(a=and2,b=D,out=final3);

    And(a=B,b=C,out=and3);
    And(a=and3,b=notD,out=final4);

    And(a=C,b=D,out=and4);
    And(a=and4,b=notB,out=final5);

    Or(a=final1,b=final2,out=or1);
    Or(a=or1,b=final3,out=or2);
    Or(a=or2,b=final4,out=or3);
    Or(a=or3,b=final5,out=g);
}